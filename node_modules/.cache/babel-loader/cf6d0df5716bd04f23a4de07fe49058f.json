{"ast":null,"code":"import _objectSpread from \"/home/monika/Pulpit/gapinska git/Project SPA/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/monika/Pulpit/gapinska git/Project SPA/src/contexts/PlanContext.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport meals from '../meals.json';\nimport { findMeal } from '../utils.js';\nimport { sendPlan, fetchPlan } from '../services/PlanService';\nimport { sendFavourites, fetchFavourites } from '../services/FavouritesService';\nexport const PlanContext = React.createContext();\nexport class PlanProvider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeDate: moment(),\n      plan: {\n        days: [{\n          date: null,\n          meals: {\n            breakfastId: null,\n            snackId: null,\n            lunchId: null,\n            dinnerId: null\n          }\n        }]\n      },\n      mealFilter: '',\n      filters: {\n        vege: false,\n        favourites: false,\n        glutenFree: false,\n        easy: false,\n        fit: false,\n        preparationTime: [0, 100]\n      },\n      filteredMeals: [],\n      favouritesMeals: [],\n      displayMotivationView: true\n    };\n\n    this.dismissMotivationView = () => {\n      this.setState({\n        displayMotivationView: false\n      });\n    };\n\n    this.toggleFilters = (event, data) => {\n      let newValue;\n      let name;\n\n      if (Array.isArray(data)) {\n        newValue = data;\n        name = 'preparationTime';\n      } else {\n        const value = data.value,\n              checked = data.checked,\n              dataName = data.name;\n        newValue = value || checked;\n        name = dataName;\n      }\n\n      const filters = _objectSpread({}, this.state.filters, {\n        [name]: newValue\n      });\n\n      const newState = _objectSpread({}, this.state, {\n        filters\n      });\n\n      this.setState(newState);\n      this.dismissMotivationView();\n    };\n\n    this.mapPlanToEvents = () => {\n      return this.planDays.map(day => {\n        if (!day.meals) {\n          return;\n        }\n\n        const date = day.date;\n        const _day$meals = day.meals,\n              breakfastId = _day$meals.breakfastId,\n              lunchId = _day$meals.lunchId,\n              snackId = _day$meals.snackId,\n              dinnerId = _day$meals.dinnerId;\n        const breakfast = meals.find(meal => meal.id === breakfastId);\n        const lunch = meals.find(meal => meal.id === lunchId);\n        const snack = meals.find(meal => meal.id === snackId);\n        const dinner = meals.find(meal => meal.id === dinnerId);\n        return [{\n          id: breakfastId,\n          title: breakfast && breakfast.name,\n          allDay: false,\n          start: moment(date, 'DD-MM-YYYY').toDate(),\n          end: moment(date, 'DD-MM-YYYY').toDate()\n        }, {\n          id: lunchId,\n          title: lunch && lunch.name,\n          allDay: false,\n          start: moment(date, 'DD-MM-YYYY').toDate(),\n          end: moment(date, 'DD-MM-YYYY').toDate()\n        }, {\n          id: snackId,\n          title: snack && snack.name,\n          allDay: false,\n          start: moment(date, 'DD-MM-YYYY').toDate(),\n          end: moment(date, 'DD-MM-YYYY').toDate()\n        }, {\n          id: dinnerId,\n          title: dinner && dinner.name,\n          allDay: false,\n          start: moment(date, 'DD-MM-YYYY').toDate(),\n          end: moment(date, 'DD-MM-YYYY').toDate()\n        }].filter(event => event.title);\n      }).reduce((acc, val) => acc.concat(val), []);\n    };\n\n    this.getMeals = date => {\n      const dayObject = this.planDays.find(day => {\n        return day.date === date;\n      });\n\n      if (!dayObject) {\n        return;\n      } else {\n        return {\n          day: moment(date),\n          breakfast: findMeal(dayObject.meals.breakfastId),\n          lunch: findMeal(dayObject.meals.lunchId),\n          snack: findMeal(dayObject.meals.snackId),\n          dinner: findMeal(dayObject.meals.dinnerId)\n        };\n      }\n    };\n\n    this.getMealsByDay = () => {\n      const foundDay = this.planDays.find(day => {\n        if (day.date === this.state.activeDate.format('DD-MM-YYYY')) {\n          return true;\n        }\n      });\n      return foundDay && foundDay.meals || {\n        breakfastId: null,\n        snackId: null,\n        lunchId: null,\n        dinnerId: null\n      };\n    };\n\n    this.setSelectedDate = date => {\n      this.setState({\n        activeDate: date\n      });\n    };\n\n    this.decrementActiveDate = () => {\n      this.setState(prevState => ({\n        activeDate: prevState.activeDate.subtract('days', 1)\n      }));\n    };\n\n    this.incrementActiveDate = () => {\n      this.setState(prevState => ({\n        activeDate: prevState.activeDate.add('days', 1)\n      }));\n    };\n\n    this.addOrRemoveMeal = (meal, isAdd) => {\n      let currentDate = this.state.activeDate.format('DD-MM-YYYY');\n      let mealsOfTheDay = this.getMealsByDay();\n      let mealId = isAdd ? meal.id : null;\n      mealsOfTheDay[meal.type + 'Id'] = mealId;\n      let dayMealIndex = this.planDays.findIndex(day => day.date === currentDate);\n\n      if (dayMealIndex !== -1) {\n        this.setState(prevState => {\n          prevState.plan.days.splice(dayMealIndex, 1);\n          return prevState;\n        });\n      }\n\n      this.setState(prevState => ({\n        [prevState.plan.days]: prevState.plan.days.push({\n          date: currentDate,\n          meals: mealsOfTheDay\n        })\n      }), () => {\n        sendPlan(this.state.plan);\n      });\n\n      if (isAdd) {\n        this.setState({\n          displayAddButton: false\n        });\n      } else {\n        this.setState({\n          displayAddButton: true\n        });\n      }\n    };\n\n    this.setMealFilter = filterName => {\n      this.setState(_objectSpread({}, this.state, {\n        mealFilter: filterName\n      }));\n    };\n\n    this.sumNutrition = field => {\n      const _this$getMealsByDay = this.getMealsByDay(),\n            lunchId = _this$getMealsByDay.lunchId,\n            dinnerId = _this$getMealsByDay.dinnerId,\n            snackId = _this$getMealsByDay.snackId,\n            breakfastId = _this$getMealsByDay.breakfastId;\n\n      const mealsIds = [breakfastId, lunchId, snackId, dinnerId];\n      const foundMealsObjects = meals.filter(meal => mealsIds.includes(meal.id));\n      return foundMealsObjects.reduce((acc, meal) => {\n        if (field !== 'kcal') {\n          return acc + meal.nutritions[field];\n        } else {\n          return acc + parseInt(meal[field]);\n        }\n      }, 0);\n    };\n\n    this.addToFavouritesMeals = meal => {\n      this.setState(prevState => {\n        if (prevState.favouritesMeals.includes(meal)) {\n          return {\n            favouritesMeals: prevState.favouritesMeals.filter(m => m !== meal)\n          };\n        }\n\n        return {\n          favouritesMeals: [...prevState.favouritesMeals, meal]\n        };\n      }, () => {\n        sendFavourites(this.state.favouritesMeals);\n      });\n    };\n  }\n\n  get planDays() {\n    return this.state.plan.days.filter(Boolean);\n  }\n\n  get filteredMeals() {\n    const _this$state = this.state,\n          mealFilter = _this$state.mealFilter,\n          filters = _this$state.filters,\n          favouritesMeals = _this$state.favouritesMeals;\n    const vege = filters.vege,\n          favourites = filters.favourites,\n          glutenFree = filters.glutenFree,\n          easy = filters.easy,\n          fit = filters.fit,\n          preparationTime = filters.preparationTime;\n    let filtered = meals.filter(meal => {\n      // fav filter\n      const onlyFavorites = favourites ? favouritesMeals.find(m => m.id === meal.id) : true; // category filter\n\n      const byMealCategory = meal.type === mealFilter; // vege\n\n      const byVege = vege ? meal.filters.includes('vege') : true;\n      const byGlutenFree = glutenFree ? meal.filters.includes('glutenFree') : true;\n      const byEasy = easy ? meal.filters.includes('easy') : true;\n      const byFit = fit ? meal.filters.includes('fit') : true;\n      const byPreparationTime = parseInt(meal.time, 10) > preparationTime[0] && parseInt(meal.time, 10) < preparationTime[1]; // connect all the filters tougether\n\n      return byMealCategory && onlyFavorites && byVege && byPreparationTime && byGlutenFree && byEasy && byFit;\n    });\n    return filtered;\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        fetchPlan(plan => {\n          this.setState({\n            plan\n          });\n        }, user.uid);\n        fetchFavourites(favouritesMeals => {\n          this.setState(favouritesMeals);\n        }, user.uid);\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(PlanContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        setSelectedDate: this.setSelectedDate,\n        events: this.mapPlanToEvents(),\n        getMeals: this.getMeals,\n        setMealFilter: this.setMealFilter,\n        showMeal: this.showMeal,\n        filteredMeals: this.filteredMeals,\n        getMealsByDay: this.getMealsByDay,\n        decrementActiveDate: this.decrementActiveDate,\n        incrementActiveDate: this.incrementActiveDate,\n        addOrRemoveMeal: this.addOrRemoveMeal,\n        addToFavouritesMeals: this.addToFavouritesMeals,\n        sumNutrition: this.sumNutrition,\n        toggleFilters: this.toggleFilters,\n        dismissMotivationView: this.dismissMotivationView\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport const PlanConsumer = PlanContext.Consumer;","map":{"version":3,"sources":["/home/monika/Pulpit/gapinska git/Project SPA/src/contexts/PlanContext.js"],"names":["React","moment","firebase","meals","findMeal","sendPlan","fetchPlan","sendFavourites","fetchFavourites","PlanContext","createContext","PlanProvider","Component","state","activeDate","plan","days","date","breakfastId","snackId","lunchId","dinnerId","mealFilter","filters","vege","favourites","glutenFree","easy","fit","preparationTime","filteredMeals","favouritesMeals","displayMotivationView","dismissMotivationView","setState","toggleFilters","event","data","newValue","name","Array","isArray","value","checked","dataName","newState","mapPlanToEvents","planDays","map","day","breakfast","find","meal","id","lunch","snack","dinner","title","allDay","start","toDate","end","filter","reduce","acc","val","concat","getMeals","dayObject","getMealsByDay","foundDay","format","setSelectedDate","decrementActiveDate","prevState","subtract","incrementActiveDate","add","addOrRemoveMeal","isAdd","currentDate","mealsOfTheDay","mealId","type","dayMealIndex","findIndex","splice","push","displayAddButton","setMealFilter","filterName","sumNutrition","field","mealsIds","foundMealsObjects","includes","nutritions","parseInt","addToFavouritesMeals","m","Boolean","filtered","onlyFavorites","byMealCategory","byVege","byGlutenFree","byEasy","byFit","byPreparationTime","time","componentDidMount","auth","onAuthStateChanged","user","uid","render","events","showMeal","props","children","PlanConsumer","Consumer"],"mappings":"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","sourcesContent":["import React from 'react'\nimport moment from 'moment'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\nimport meals from '../meals.json'\nimport { findMeal } from '../utils.js'\nimport { sendPlan, fetchPlan } from '../services/PlanService'\nimport { sendFavourites, fetchFavourites } from '../services/FavouritesService'\n\nexport const PlanContext = React.createContext()\n\nexport class PlanProvider extends React.Component {\n  state = {\n    activeDate: moment(),\n    plan: {\n      days: [\n        {\n          date: null,\n          meals: {\n            breakfastId: null,\n            snackId: null,\n            lunchId: null,\n            dinnerId: null\n          }\n        }\n      ]\n    },\n    mealFilter: '',\n    filters: {\n      vege: false,\n      favourites: false,\n      glutenFree: false,\n      easy: false,\n      fit: false,\n      preparationTime: [0, 100]\n    },\n    filteredMeals: [],\n    favouritesMeals: [],\n    displayMotivationView: true\n  }\n\n  dismissMotivationView = () => {\n    this.setState({\n      displayMotivationView: false\n    })\n  }\n\n  toggleFilters = (event, data) => {\n    let newValue\n    let name\n\n    if (Array.isArray(data)) {\n      newValue = data\n      name = 'preparationTime'\n    } else {\n      const { value, checked, name: dataName } = data\n      newValue = value || checked\n      name = dataName\n    }\n\n    const filters = {\n      ...this.state.filters,\n      [name]: newValue\n    }\n    const newState = {\n      ...this.state,\n      filters\n    }\n    this.setState(newState)\n    this.dismissMotivationView()\n  }\n\n  mapPlanToEvents = () => {\n    return this.planDays\n      .map(day => {\n        if (!day.meals) {\n          return\n        }\n        const date = day.date\n        const { breakfastId, lunchId, snackId, dinnerId } = day.meals\n        const breakfast = meals.find(meal => meal.id === breakfastId)\n        const lunch = meals.find(meal => meal.id === lunchId)\n        const snack = meals.find(meal => meal.id === snackId)\n        const dinner = meals.find(meal => meal.id === dinnerId)\n\n        return [\n          {\n            id: breakfastId,\n            title: breakfast && breakfast.name,\n            allDay: false,\n            start: moment(date, 'DD-MM-YYYY').toDate(),\n            end: moment(date, 'DD-MM-YYYY').toDate()\n          },\n          {\n            id: lunchId,\n            title: lunch && lunch.name,\n            allDay: false,\n            start: moment(date, 'DD-MM-YYYY').toDate(),\n            end: moment(date, 'DD-MM-YYYY').toDate()\n          },\n          {\n            id: snackId,\n            title: snack && snack.name,\n            allDay: false,\n            start: moment(date, 'DD-MM-YYYY').toDate(),\n            end: moment(date, 'DD-MM-YYYY').toDate()\n          },\n          {\n            id: dinnerId,\n            title: dinner && dinner.name,\n            allDay: false,\n            start: moment(date, 'DD-MM-YYYY').toDate(),\n            end: moment(date, 'DD-MM-YYYY').toDate()\n          }\n        ].filter(event => event.title)\n      })\n      .reduce((acc, val) => acc.concat(val), [])\n  }\n\n  getMeals = date => {\n    const dayObject = this.planDays.find(day => {\n      return day.date === date\n    })\n    if (!dayObject) {\n      return\n    } else {\n      return {\n        day: moment(date),\n        breakfast: findMeal(dayObject.meals.breakfastId),\n        lunch: findMeal(dayObject.meals.lunchId),\n        snack: findMeal(dayObject.meals.snackId),\n        dinner: findMeal(dayObject.meals.dinnerId)\n      }\n    }\n  }\n\n  getMealsByDay = () => {\n    const foundDay = this.planDays.find(day => {\n      if (day.date === this.state.activeDate.format('DD-MM-YYYY')) {\n        return true\n      }\n    })\n    return (\n      (foundDay && foundDay.meals) || {\n        breakfastId: null,\n        snackId: null,\n        lunchId: null,\n        dinnerId: null\n      }\n    )\n  }\n\n  setSelectedDate = date => {\n    this.setState({\n      activeDate: date\n    })\n  }\n\n  decrementActiveDate = () => {\n    this.setState(prevState => ({\n      activeDate: prevState.activeDate.subtract('days', 1)\n    }))\n  }\n\n  incrementActiveDate = () => {\n    this.setState(prevState => ({\n      activeDate: prevState.activeDate.add('days', 1)\n    }))\n  }\n\n  get planDays() {\n    return this.state.plan.days.filter(Boolean)\n  }\n\n  addOrRemoveMeal = (meal, isAdd) => {\n    let currentDate = this.state.activeDate.format('DD-MM-YYYY')\n    let mealsOfTheDay = this.getMealsByDay()\n    let mealId = isAdd ? meal.id : null\n    mealsOfTheDay[meal.type + 'Id'] = mealId\n    let dayMealIndex = this.planDays.findIndex(day => day.date === currentDate)\n\n    if (dayMealIndex !== -1) {\n      this.setState(prevState => {\n        prevState.plan.days.splice(dayMealIndex, 1)\n        return prevState\n      })\n    }\n    this.setState(\n      prevState => ({\n        [prevState.plan.days]: prevState.plan.days.push({\n          date: currentDate,\n          meals: mealsOfTheDay\n        })\n      }),\n      () => {\n        sendPlan(this.state.plan)\n      }\n    )\n\n    if (isAdd) {\n      this.setState({ displayAddButton: false })\n    } else {\n      this.setState({ displayAddButton: true })\n    }\n  }\n\n  setMealFilter = filterName => {\n    this.setState({\n      ...this.state,\n      mealFilter: filterName\n    })\n  }\n\n  get filteredMeals() {\n    const { mealFilter, filters, favouritesMeals } = this.state\n    const { vege, favourites, glutenFree, easy, fit, preparationTime } = filters\n\n    let filtered = meals.filter(meal => {\n      // fav filter\n      const onlyFavorites = favourites ? favouritesMeals.find(m => m.id === meal.id) : true\n\n      // category filter\n      const byMealCategory = meal.type === mealFilter\n\n      // vege\n      const byVege = vege ? meal.filters.includes('vege') : true\n\n      const byGlutenFree = glutenFree ? meal.filters.includes('glutenFree') : true\n\n      const byEasy = easy ? meal.filters.includes('easy') : true\n\n      const byFit = fit ? meal.filters.includes('fit') : true\n\n      const byPreparationTime =\n        parseInt(meal.time, 10) > preparationTime[0] && parseInt(meal.time, 10) < preparationTime[1]\n\n      // connect all the filters tougether\n      return (\n        byMealCategory &&\n        onlyFavorites &&\n        byVege &&\n        byPreparationTime &&\n        byGlutenFree &&\n        byEasy &&\n        byFit\n      )\n    })\n    return filtered\n  }\n\n  sumNutrition = field => {\n    const { lunchId, dinnerId, snackId, breakfastId } = this.getMealsByDay()\n    const mealsIds = [breakfastId, lunchId, snackId, dinnerId]\n\n    const foundMealsObjects = meals.filter(meal => mealsIds.includes(meal.id))\n\n    return foundMealsObjects.reduce((acc, meal) => {\n      if (field !== 'kcal') {\n        return acc + meal.nutritions[field]\n      } else {\n        return acc + parseInt(meal[field])\n      }\n    }, 0)\n  }\n\n  addToFavouritesMeals = meal => {\n    this.setState(\n      prevState => {\n        if (prevState.favouritesMeals.includes(meal)) {\n          return {\n            favouritesMeals: prevState.favouritesMeals.filter(m => m !== meal)\n          }\n        }\n        return {\n          favouritesMeals: [...prevState.favouritesMeals, meal]\n        }\n      },\n      () => {\n        sendFavourites(this.state.favouritesMeals)\n      }\n    )\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        fetchPlan(plan => {\n          this.setState({ plan })\n        }, user.uid)\n\n        fetchFavourites(favouritesMeals => {\n          this.setState(favouritesMeals)\n        }, user.uid)\n      }\n    })\n  }\n\n  render() {\n    return (\n      <PlanContext.Provider\n        value={{\n          ...this.state,\n          setSelectedDate: this.setSelectedDate,\n          events: this.mapPlanToEvents(),\n          getMeals: this.getMeals,\n          setMealFilter: this.setMealFilter,\n          showMeal: this.showMeal,\n          filteredMeals: this.filteredMeals,\n          getMealsByDay: this.getMealsByDay,\n          decrementActiveDate: this.decrementActiveDate,\n          incrementActiveDate: this.incrementActiveDate,\n          addOrRemoveMeal: this.addOrRemoveMeal,\n          addToFavouritesMeals: this.addToFavouritesMeals,\n          sumNutrition: this.sumNutrition,\n          toggleFilters: this.toggleFilters,\n          dismissMotivationView: this.dismissMotivationView\n        }}>\n        {this.props.children}\n      </PlanContext.Provider>\n    )\n  }\n}\nexport const PlanConsumer = PlanContext.Consumer\n"]},"metadata":{},"sourceType":"module"}